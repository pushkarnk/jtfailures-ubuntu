#! /usr/bin/python3 -u

import sys
import os
import re
from enum import Enum
from collections import defaultdict

command = None
deb = None

class Command(Enum):
  LIST_ALL = 1
  LIST_NEW = 2
  UPDATE = 3 
  HELP = 4 

def print_error_exit(msg, code = 1):
  print(f"error: {msg}")
  exit(code)

def parseargs(args):
  global command, deb

  # Three uses:
  #  - jtfailures list-all <deb>
  #  - jtfailures list-new <deb>
  #  - jtfailures update <deb>

  if args[1] == "help":
    command = Command.HELP
    return

  if not args[2].endswith(".deb"):
    print("error: jtfailure commands need a .deb input")
    exit(1)
  else:
    deb = args[2]

  if args[1] == "list-all":
    command = Command.LIST_ALL
  elif args[1] == "list-new":
    command = Command.LIST_NEW
  elif args[1] == "update":
    command = Command.UPDATE
  else:
    print("error: unknown command")
    exit(1)

def cmd_help():
  print("help")

def find_file(root_directory, target_file):
    for dirpath, dirnames, filenames in os.walk(root_directory):
        if target_file in filenames:
            return os.path.join(dirpath, target_file)
    return None

def cmd_list_all():
  global deb

  errors, failures = list_all(deb)
  print("[errors]")
  for error in errors:
    print(error)

  print("[failures]")
  for failure in failures:
    print(failure)
  
def list_all(deb):
  # dpkg-deb file, if failure throw error and exit
  rc = os.system(f"dpkg-deb -xv {deb} ./temp > jta.log 2>&1")
  if rc != 0:
    print_error_exit("dpkg-deb failed")

  # check if jtreg log.gz exists, if not throw error and exit
  loggz = find_file ("./temp", "jtreg-summary-hotspot.log.gz")
  log = find_file ("./temp", "jtreg-summary-hotspot.log")

  if loggz is None and log is None:
    print_error_exit(f"jtreg summary not found in {deb}")

  # gunzip, if failure throw error and exit
  if not loggz is None:
    rc = os.system(f"gunzip {loggz}")
    if rc != 0:
      print_error_exit(f"gunzip failed on {loggz}")
    log = loggz[:-3]

  if not os.path.isfile(log):
    print_error_exit(f"file {log} does not exist")

  # open the file
  with open(log, 'r') as file:
    lines = file.readlines()

  # enumerate FAILS and ERROR
  errors = defaultdict(lambda: 0) 
  failures = defaultdict(lambda: 0) 

  for line in lines:
    if line.startswith("FAILED:"):
      failures[line.split(" ")[1]] += 1
    else:
      if line.startswith("Error:"): 
        errors[line.split(" ")[2]] += 1

  # report plain list
  errors = [test.strip() for test in errors if errors[test] == 3]
  failures = [test.strip() for test in failures if failures[test] == 3]

  os.system(f"rm -rf ./temp jta.log")
  return errors, failures

def cmd_list_new():
  print("list_new")

def cmd_update():
  global deb

  errors, failures = list_all(deb)

  debname = deb.split("/").pop()
  print(debname)
  openjdk_version = debname.split("-")[1]
  version = debname.split("~")[1]
  pattern = r'^(\d+\.\d+)(?:\.\d+)?_(\w+)\.deb$'  
  match = re.match(pattern, version)
  ubuntu_version = match.group(1)
  architecture = match.group(2)

  file = f"./data/openjdk-{openjdk_version}-{ubuntu_version}-{architecture}"

  with open(file, 'w') as file:
    print(f"[{debname}]\n", file = file)
    print(f"[failures]", file = file)
    for f in failures:
      print(f"{f}", file = file)
    print(f"\n[errors]", file = file)
    for e in errors:
      print(f"{e}", file = file)
    

def main():
  global command
  parseargs(sys.argv)
  commands = {
    Command.HELP: cmd_help,
    Command.LIST_ALL: cmd_list_all,
    Command.LIST_NEW: cmd_list_new, 
    Command.UPDATE: cmd_update
  }
  commands[command]() 

 
if __name__ == "__main__": 
  main()

